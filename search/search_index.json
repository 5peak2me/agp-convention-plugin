{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>\u4e00\u4e2aAndroid\u5f00\u53d1\u7684\u516c\u7ea6\u63d2\u4ef6\uff0c\u5b9a\u4e49\u4e86\u5de5\u7a0b\u7ea6\u675f\u63d2\u4ef6\uff0c\u7528\u4e8e\u4fdd\u6301\u914d\u7f6e\u7edf\u4e00</p> <p>\u4e3b\u8981\u4ee3\u7801\u6765\u81ea\u4e8enowinandroid\uff0c\u4fee\u6539\u4e86\u90e8\u5206\u5c40\u9650\u7684\u7ea6\u675f</p>"},{"location":"#agp-convention-plugin","title":"agp-convention-plugin","text":"<p>The <code>build-logic</code> folder defines project-specific convention plugins, used to keep a single source of truth for common module configurations.</p> <p>This approach is heavily based on https://developer.squareup.com/blog/herding-elephants/ and https://github.com/jjohannes/idiomatic-gradle.</p> <p>By setting up convention plugins in <code>build-logic</code>, we can avoid duplicated build script setup, messy <code>subproject</code> configurations, without the pitfalls of the <code>buildSrc</code> directory.</p> <p><code>build-logic</code> is an included build, as configured in the root <code>settings.gradle.kts</code>.</p> <p>Inside <code>build-logic</code> is a <code>convention</code> module, which defines a set of plugins that all normal modules can use to configure themselves.</p> <p><code>build-logic</code> also includes a set of <code>Kotlin</code> files used to share logic between plugins themselves, which is most useful for configuring Android components (libraries vs applications) with shared code.</p> <p>These plugins are additive and composable, and try to only accomplish a single responsibility. Modules can then pick and choose the configurations they need. If there is one-off logic for a module without shared code, it\u2019s preferable to define that directly in the module\u2019s <code>build.gradle</code>, as opposed to creating a convention plugin with module-specific setup.</p> <p>Current list of convention plugins:</p> <ul> <li><code>nowinandroid.android.application</code>,   <code>nowinandroid.android.library</code>,   <code>nowinandroid.android.test</code>:   Configures common Android and Kotlin options.</li> <li><code>nowinandroid.android.application.compose</code>,   <code>nowinandroid.android.library.compose</code>:   Configures Jetpack Compose options</li> </ul>"},{"location":"contribute/code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"contribute/code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"contribute/code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"contribute/code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"contribute/code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"contribute/code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at skydoves (Jaewoong Eum). All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"contribute/code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"contribute/code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"contribute/code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"contribute/code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"contribute/code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"contribute/code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contribute/contributing/","title":"Contributing","text":""},{"location":"contribute/contributing/#how-to-contribute","title":"How to contribute","text":"<p>We\u2019d love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.</p>"},{"location":"contribute/contributing/#preparing-a-pull-request-for-review","title":"Preparing a pull request for review","text":"<p>Ensure your change is properly formatted by running:</p> <pre><code>./gradlew spotlessApply\n</code></pre> <p>Then dump binary API of this library that is public in sense of Kotlin visibilities and ensures that the public binary API wasn\u2019t changed in a way that make this change binary incompatible.</p> <pre><code>./gradlew apiDump\n</code></pre> <p>Please correct any failures before requesting a review.</p>"},{"location":"contribute/contributing/#code-reviews","title":"Code reviews","text":"<p>All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.</p>"},{"location":"features/l3gacy.android.application.compose/","title":"l3gacy.android.application.compose","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-    id(\"com.android.application\")\n-    id(\"org.jetbrains.kotlin.android\")\n\n+    id(\"l3gacy.android.application\")\n+    id(\"l3gacy.android.application.compose\")\n}\n\nandroid {\n    namespace = \"com.l3gacy.app.myapplication\"\n\n-   buildFeatures {\n-       compose = true\n-   }\n\n-   composeOptions {\n-       kotlinCompilerExtensionVersion = \"1.4.8\"\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = \"1.8\"\n-   }\n\n}\n\ndependencies {\n-   val composeBom = platform(\"androidx.compose:compose-bom:2023.06.01\")\n-   implementation(composeBom)\n-   androidTestImplementation(composeBom)\n\n   implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n</code></pre> <pre><code>plugins {\n-    id(\"com.android.application\")\n-    id(\"org.jetbrains.kotlin.android\")\n\n+    id 'l3gacy.android.application'\n+    id 'l3gacy.android.application.compose'\n}\n\nandroid {\n    namespace = \"com.l3gacy.app.myapplication\"\n\n-   buildFeatures {\n-       compose true\n-   }\n\n-   composeOptions {\n-       kotlinCompilerExtensionVersion = \"1.4.8\"\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = \"1.8\"\n-   }\n\n}\n\ndependencies {\n-   def composeBom = platform('androidx.compose:compose-bom:2023.06.01')\n-   implementation composeBom\n-   androidTestImplementation composeBom\n\n   implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n</code></pre>"},{"location":"features/l3gacy.android.application.firebase/","title":"l3gacy.android.application.firebase","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n    id(\"com.android.application\")\n\n-   id(\"com.google.gms.google-services\")\n-   id(\"com.google.firebase.crashlytics\")\n-   id(\"com.google.firebase.perf\")\n\n+   id(\"l3gacy.android.application.firebase\")\n}\n\nandroid {\n    namespace 'com.example'\n\n    \u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n\n-   buildTypes {\n-       debug {\n-           firebaseCrashlytics {\n-               mappingFileUploadEnabled = true\n-           }\n-           crashlytics {\n-               mappingFileUploadEnabled = true\n-           }\n-       }\n-   }\n\n}\n\ndependencies {\n\n-   implementation(platform(\"com.google.firebase:firebase-bom:26.8.0\"))\n-   implementation(\"com.google.firebase:firebase-analytics\")\n-   implementation(\"com.google.firebase:firebase-crashlytics\")\n-   implementation(\"com.google.firebase:firebase-perf\")\n\n   \u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n}\n</code></pre> <pre><code>plugins {\n    id 'com.android.application'\n\n-   id 'com.google.gms.google-services'\n-   id 'com.google.firebase.crashlytics'\n-   id 'com.google.firebase.perf'\n\n+   id 'l3gacy.android.application.firebase'\n}\n\nandroid {\n    namespace 'com.example'\n\n    \u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n\n-   buildTypes {\n-       debug {\n-           firebaseCrashlytics {\n-               mappingFileUploadEnabled true\n-           }\n-           crashlytics {\n-               mappingFileUploadEnabled true\n-           }\n-       }\n-   }\n\n}\n\ndependencies {\n\n-   implementation platform('com.google.firebase:firebase-bom:26.8.0')\n-   implementation 'com.google.firebase:firebase-analytics'\n-   implementation 'com.google.firebase:firebase-crashlytics'\n-   implementation 'com.google.firebase:firebase-perf'\n\n   \u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n}\n</code></pre>"},{"location":"features/l3gacy.android.application.flavors/","title":"L3gacy.android.application.flavors","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-   id(\"com.android.application\")\n-   id(\"org.jetbrains.kotlin.android\")\n\n+   id(\"l3gacy.android.application\")\n+   id(\"l3gacy.android.application.flavors\")\n}\n\nandroid {\n    namespace = \"com.example\"\n\n    \u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n\n-   productFlavors {\n-       demo {\n-           applicationIdSuffix = \".demo\"\n-           dimension = \"contentType\"\n-       }\n-       prod {\n-           applicationIdSuffix = \"\"\n-       }\n-   }\n\n}\n</code></pre> <pre><code>plugins {\n-   id 'com.android.application'\n-   id 'org.jetbrains.kotlin.android'\n\n+   id 'l3gacy.android.application'\n+   id 'l3gacy.android.application.flavors'\n}\n\nandroid {\n    namespace 'com.example'\n\n    \u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n\n-   productFlavors {\n-       demo {\n-           applicationIdSuffix = \".demo\"\n-           dimension = \"contentType\"\n-       }\n-       prod {\n-           applicationIdSuffix = \"\"\n-       }\n-   }\n\n}\n</code></pre> <p>The current <code>flavor</code> configuration code is as follows.</p> <pre><code>@Suppress(\"EnumEntryName\")\nenum class FlavorDimension {\ncontentType,\n}\n\n// The content for the app can either come from local static data which is useful for demo\n// purposes, or from a production backend server which supplies up-to-date, real content.\n// These two product flavors reflect this behaviour.\n@Suppress(\"EnumEntryName\")\nenum class Flavor(val dimension: FlavorDimension, val applicationIdSuffix: String? = null) {\ndemo(FlavorDimension.contentType, applicationIdSuffix = \".demo\"),\nprod(FlavorDimension.contentType),\n}\n\nfun configureFlavors(\ncommonExtension: AndroidExtension,\nflavorConfigurationBlock: ProductFlavor.(flavor: Flavor) -&gt; Unit = {},\n) {\ncommonExtension.apply {\nflavorDimensions += FlavorDimension.contentType.name\nproductFlavors {\nFlavor.values().forEach {\ncreate(it.name) {\ndimension = it.dimension.name\nflavorConfigurationBlock(this, it)\nif (this@apply is ApplicationExtension &amp;&amp; this is ApplicationProductFlavor) {\nif (it.applicationIdSuffix != null) {\napplicationIdSuffix = it.applicationIdSuffix\n}\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"features/l3gacy.android.application.jacoco/","title":"l3gacy.android.application.jacoco","text":""},{"location":"features/l3gacy.android.application.jacoco/#the-jacoco-plugin","title":"The JaCoCo Plugin","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-   id(\"com.android.application\")\n-   id(\"jacoco\") // or id(\"org.gradle.jacoco\")\n\n+   id(\"l3gacy.android.jacoco\")\n}\n\njacoco {\n    toolVersion = \"0.8.9\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')\n}\n\ntasks.jacocoTestReport {\n    dependsOn(tasks.test) // tests are required to run before generating the report\n\n    reports {\n        xml.required.set(false)\n        csv.required.set(false)\n    }\n}\n</code></pre> <pre><code>plugins {\n-   id 'com.android.application'\n-   id 'jacoco' // or id 'org.gradle.jacoco'\n\n+   id 'l3gacy.android.jacoco'\n}\n\njacoco {\n    toolVersion = \"0.8.9\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')\n}\n\njacocoTestReport {\n    dependsOn test // tests are required to run before generating the report\n\n    reports {\n        xml.required = false\n        csv.required = false\n    }\n}\n</code></pre> <p>The current <code>jacoco</code> configuration code is as follows. You may need to configure the version of <code>jacoco</code> in <code>libs.versions.toml</code> again.</p> <pre><code>internal fun Project.configureJacoco(\nandroidComponentsExtension: AndroidComponentsExtension&lt;*, *, *&gt;,\n) {\nconfigure&lt;JacocoPluginExtension&gt; {\ntoolVersion = libs.findVersion(\"jacoco\").get().toString()\n}\n\nval jacocoTestReport = tasks.create(\"jacocoTestReport\")\n\nandroidComponentsExtension.onVariants { variant -&gt;\nval testTaskName = \"test${variant.name.capitalize()}UnitTest\"\n\nval reportTask = tasks.register(\"jacoco${testTaskName.capitalize()}Report\", JacocoReport::class) {\ndependsOn(testTaskName)\n\nreports {\nxml.required.set(true)\nhtml.required.set(true)\n}\n\nclassDirectories.setFrom(\nfileTree(\"$buildDir/tmp/kotlin-classes/${variant.name}\") {\nexclude(coverageExclusions)\n},\n)\n\nsourceDirectories.setFrom(files(\"$projectDir/src/main/java\", \"$projectDir/src/main/kotlin\"))\nexecutionData.setFrom(file(\"$buildDir/jacoco/$testTaskName.exec\"))\n}\n\njacocoTestReport.dependsOn(reportTask)\n}\n\ntasks.withType&lt;Test&gt;().configureEach {\nconfigure&lt;JacocoTaskExtension&gt; {\n// Required for JaCoCo + Robolectric\n// https://github.com/robolectric/robolectric/issues/2230\n// TODO: Consider removing if not we don't add Robolectric\nisIncludeNoLocationClasses = true\n\n// Required for JDK 11 with the above\n// https://github.com/gradle/gradle/issues/5184#issuecomment-391982009\nexcludes = listOf(\"jdk.internal.*\")\n}\n}\n}\n</code></pre>"},{"location":"features/l3gacy.android.application/","title":"l3gacy.android.application","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-   id(\"com.android.application\")\n-   id(\"org.jetbrains.kotlin.android\")\n\n+   id(\"l3gacy.android.application\")\n}\n\nandroid {\n    namespace = \"com.example\"\n\n-   compileSdk = 33\n\n   defaultConfig {\n        applicationId = \"com.example\"\n-       minSdk = 24\n-       targetSdk = 33\n       versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n\n-   compileOptions {\n-       sourceCompatibility = JavaVersion.VERSION_1_8\n-       targetCompatibility = JavaVersion.VERSION_1_8\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = \"1.8\"\n-   }\n\n}\n\ndependencies {\n\n    implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n</code></pre> <pre><code>plugins {\n-   id 'com.android.application'\n-   id 'org.jetbrains.kotlin.android'\n\n+   id 'l3gacy.android.application'\n}\n\nandroid {\n    namespace 'com.example'\n\n-   compileSdk 33\n\n   defaultConfig {\n        applicationId \"com.example\"\n-       minSdk 24\n-       targetSdk 33\n       versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n-   compileOptions {\n-       sourceCompatibility JavaVersion.VERSION_1_8\n-       targetCompatibility JavaVersion.VERSION_1_8\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = '1.8'\n-   }\n\n}\n\ndependencies {\n\n    implementation 'androidx.core:core-ktx:1.9.0'\n    implementation 'androidx.appcompat:appcompat:1.6.1'\n    implementation 'com.google.android.material:material:1.8.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n}\n</code></pre>"},{"location":"features/l3gacy.android.hilt/","title":"l3gacy.android.hilt","text":""},{"location":"features/l3gacy.android.hilt/#dependency-injection-with-hilt","title":"Dependency injection with Hilt","text":"<p>First, add the <code>hilt-android-gradle-plugin</code> plugin to your project\u2019s root <code>build.gradle</code> file:</p> build.gradle.ktsbuild.gradle <pre><code>plugins {\n\n\u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n\nid(\"com.google.dagger.hilt.android\") version \"2.44\" apply false\n}\n</code></pre> <pre><code>plugins {\n\n\u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n\nid 'com.google.dagger.hilt.android' version '2.44' apply false\n}\n</code></pre> <p>Then, apply the Gradle plugin and add these dependencies in your <code>app/build.gradle</code> file:</p> build.gradle.ktsbuild.gradle <pre><code>plugins {\n-   id(\"com.android.application\") // or id(\"com.android.library\")\n-   id(\"dagger.hilt.android.plugin\")\n-   id(\"org.jetbrains.kotlin.kapt\")\n\n+   id(\"l3gacy.android.application\") // or id(\"l3gacy.android.library\")\n+   id(\"l3gacy.android.hilt\")\n}\n\nandroid {\n    namespace = \"com.example\"\n}\n\ndependencies {\n-   implementation(\"com.google.dagger:hilt-android:2.44\")\n-   kapt(\"com.google.dagger:hilt-android-compiler:2.44\")\n-   kaptAndroidTest(\"com.google.dagger:hilt-android-compiler:2.44\")\n\n   implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n\n// Allow references to generated code\nkapt {\n    correctErrorTypes = true\n}\n</code></pre> <pre><code>plugins {\n-   id 'com.android.application' // or id 'com.android.library'\n-   id 'org.jetbrains.kotlin.android'\n-   id 'dagger.hilt.android.plugin'\n\n+   id 'l3gacy.android.application' // or id 'l3gacy.android.library'\n+   id 'l3gacy.android.hilt'\n}\n\nandroid {\n    namespace 'com.example'\n}\n\ndependencies {\n-   implementation 'com.google.dagger:hilt-android:2.44'\n-   kapt 'com.google.dagger:hilt-android-compiler:2.44'\n-   kaptAndroidTest com.google.dagger:hilt-android-compiler:2.44\n\n   implementation 'androidx.core:core-ktx:1.9.0'\n    implementation 'androidx.appcompat:appcompat:1.6.1'\n    implementation 'com.google.android.material:material:1.9.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n}\n\n// Allow references to generated code\nkapt {\n    correctErrorTypes = true\n}\n</code></pre>"},{"location":"features/l3gacy.android.library.compose/","title":"l3gacy.android.library.compose","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-    id(\"com.android.library\")\n-    id(\"org.jetbrains.kotlin.android\")\n\n+    id(\"l3gacy.android.library\")\n+    id(\"l3gacy.android.library.compose\")\n}\n\nandroid {\n    namespace = \"com.example.mylibrary\"\n\n-   buildFeatures {\n-       compose = true\n-   }\n\n-   composeOptions {\n-       kotlinCompilerExtensionVersion = \"1.4.8\"\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = \"1.8\"\n-   }\n\n}\n\ndependencies {\n-   val composeBom = platform(\"androidx.compose:compose-bom:2023.06.01\")\n-   implementation(composeBom)\n-   androidTestImplementation(composeBom)\n\n   implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n</code></pre> <pre><code>plugins {\n-    id(\"com.android.library\")\n-    id(\"org.jetbrains.kotlin.android\")\n\n+    id 'l3gacy.android.library'\n+    id 'l3gacy.android.library.compose'\n}\n\nandroid {\n    namespace = \"com.example.mylibrary\"\n\n-   buildFeatures {\n-       compose true\n-   }\n\n-   composeOptions {\n-       kotlinCompilerExtensionVersion = \"1.4.8\"\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = \"1.8\"\n-   }\n\n}\n\ndependencies {\n-   def composeBom = platform('androidx.compose:compose-bom:2023.06.01')\n-   implementation composeBom\n-   androidTestImplementation composeBom\n\n   implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n</code></pre>"},{"location":"features/l3gacy.android.library.jacoco/","title":"l3gacy.android.library.jacoco","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-   id(\"com.android.library\")\n-   id(\"jacoco\") // or id(\"org.gradle.jacoco\")\n\n+   id(\"l3gacy.android.jacoco\")\n}\n\njacoco {\n    toolVersion = \"0.8.9\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')\n}\n</code></pre> <pre><code>plugins {\n-   id 'com.android.library'\n-   id 'jacoco' // or id 'org.gradle.jacoco'\n\n+   id 'l3gacy.android.jacoco'\n}\n\njacoco {\n    toolVersion = \"0.8.9\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')\n}\n</code></pre>"},{"location":"features/l3gacy.android.library/","title":"l3gacy.android.library","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-   id(\"com.android.library\")\n-   id(\"org.jetbrains.kotlin.android\")\n\n+   id(\"l3gacy.android.library\")\n}\n\nandroid {\n    namespace = \"com.example\"\n\n-   compileSdk = 33\n\n-   defaultConfig {\n-       minSdk = 24\n-       targetSdk = 33\n\n-       testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n-       consumerProguardFiles(\"consumer-rules.pro\")\n-   }\n\n-   buildTypes {\n-       release {\n-           isMinifyEnabled = false\n-           proguardFiles(\n-               getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n-               \"proguard-rules.pro\"\n-           )\n-       }\n-   }\n\n-   compileOptions {\n-       // For AGP 4.1+\n-       isCoreLibraryDesugaringEnabled = true\n-       // For AGP 4.0\n-       // coreLibraryDesugaringEnabled = true\n-       sourceCompatibility = JavaVersion.VERSION_11\n-       targetCompatibility = JavaVersion.VERSION_11\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = JavaVersion.VERSION_11.toString()\n-       freeCompilerArgs += listOf(\n-           \"-Xopt-in=kotlin.RequiresOptIn\",\n-           \"-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi\",\n-           \"-Xopt-in=kotlinx.coroutines.FlowPreview\",\n-       )\n-   }\n\n}\n\ndependencies {\n-   coreLibraryDesugaring(\"com.android.tools:desugar_jdk_libs:1.2.2\")\n\n   implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n</code></pre> <pre><code>plugins {\n-   id 'com.android.library'\n-   id 'org.jetbrains.kotlin.android'\n\n+   id 'l3gacy.android.library'\n}\n\nandroid {\n    namespace 'com.example'\n\n-   compileSdk 33\n\n-   defaultConfig {\n-       minSdk 24\n-       targetSdk 33\n\n-       testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n-       consumerProguardFiles \"consumer-rules.pro\"\n-   }\n\n-   buildTypes {\n-       release {\n-           minifyEnabled false\n-           proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n-       }\n-   }\n\n-   compileOptions {\n-       // Flag to enable support for the new language APIs\n-       coreLibraryDesugaringEnabled true\n-       // Sets Java compatibility to Java 8\n-       sourceCompatibility JavaVersion.VERSION_1_8\n-       targetCompatibility JavaVersion.VERSION_1_8\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = '1.8'\n-   }\n}\n\ndependencies {\n-   coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'\n\n   implementation 'androidx.core:core-ktx:1.9.0'\n    implementation 'androidx.appcompat:appcompat:1.6.1'\n    implementation 'com.google.android.material:material:1.8.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n}\n</code></pre>"},{"location":"features/l3gacy.android.room/","title":"l3gacy.android.room","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n+   id(\"l3gacy.android.application\") // or id(\"l3gacy.android.library\")\n\n-   id(\"com.google.devtools.ksp\")\n+   id(\"l3gacy.android.room\")\n}\n\nandroid {\n    namespace = \"com.example\"\n}\n\n-ksp {\n-    arg(RoomSchemaArgProvider(File(projectDir, \"schemas\")))\n-}\n\ndependencies {\n-   val room_version = \"2.5.2\"\n-   implementation(\"androidx.room:room-runtime:$room_version\")\n-   ksp(\"androidx.room:room-compiler:$room_version\")\n-   implementation(\"androidx.room:room-ktx:$room_version\")\n\n   implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n</code></pre> <pre><code>plugins {\n+   id(\"l3gacy.android.application\") // or id(\"l3gacy.android.library\")\n\n-   id(\"com.google.devtools.ksp\")\n+   id(\"l3gacy.android.room\")\n}\n\nandroid {\n    namespace = \"com.example\"\n}\n\n-ksp {\n-    arg(RoomSchemaArgProvider(File(projectDir, \"schemas\")))\n-}\n\ndependencies {\n-   val room_version = \"2.5.2\"\n-   implementation(\"androidx.room:room-runtime:$room_version\")\n-   ksp(\"androidx.room:room-compiler:$room_version\")\n-   implementation(\"androidx.room:room-ktx:$room_version\")\n\n   implementation(\"androidx.core:core-ktx:1.9.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"com.google.android.material:material:1.9.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n}\n</code></pre>"},{"location":"features/l3gacy.android.test/","title":"l3gacy.android.test","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-   id(\"com.android.test\")\n-   id(\"org.jetbrains.kotlin.android\")\n\n+   id(\"l3gacy.android.test\")\n}\n\nandroid {\n    namespace = \"com.example\"\n\n-   compileSdk = 33\n\n-   defaultConfig {\n-       minSdk = 24\n-       targetSdk = 33\n\n-       testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n-       consumerProguardFiles(\"consumer-rules.pro\")\n-   }\n\n-   buildTypes {\n-       release {\n-           isMinifyEnabled = false\n-           proguardFiles(\n-               getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n-               \"proguard-rules.pro\"\n-           )\n-       }\n-   }\n\n-   compileOptions {\n-       sourceCompatibility = JavaVersion.VERSION_11\n-       targetCompatibility = JavaVersion.VERSION_11\n-       isCoreLibraryDesugaringEnabled = true\n-   }\n\n-   kotlinOptions {\n-       jvmTarget = JavaVersion.VERSION_11.toString()\n-       isCoreLibraryDesugaringEnabled = true\n-       freeCompilerArgs += listOf(\n-           \"-Xopt-in=kotlin.RequiresOptIn\",\n-           \"-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi\",\n-           \"-Xopt-in=kotlinx.coroutines.FlowPreview\",\n-       )\n-   }\n\n\n}\n\ndependencies {\n-   coreLibraryDesugaring(\"com.android.tools:desugar_jdk_libs:1.2.2\")\n\n   \u00b7\u00b7\u00b7 omit \u00b7\u00b7\u00b7\n}\n</code></pre> <pre><code>plugins {\n-   id 'com.android.test'\n-   id 'org.jetbrains.kotlin.android'\n\n+   id 'l3gacy.android.test'\n}\n</code></pre>"},{"location":"features/l3gacy.jvm.library/","title":"l3gacy.jvm.library","text":"build.gradle.ktsbuild.gradle <pre><code>plugins {\n-   id(\"org.jetbrains.kotlin.jvm\") version '1.4.32'\n\n+   id(\"l3gacy.jvm.library\") version '0.0.1'\n   id(\"org.jetbrains.kotlin.plugin.serialization\") version '1.4.32'\n}\n\n- java {\n-     sourceCompatibility = JavaVersion.VERSION_11\n-     targetCompatibility = JavaVersion.VERSION_11\n- }\n</code></pre> <pre><code>plugins {\n-   id 'org.jetbrains.kotlin.jvm' version '1.4.32'\n\n+   id 'l3gacy.jvm.library' version '0.0.1'\n   id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.32'\n}\n\n- java {\n-     sourceCompatibility = JavaVersion.VERSION_11\n-     targetCompatibility = JavaVersion.VERSION_11\n- }\n</code></pre>"}]}